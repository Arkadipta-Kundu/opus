openapi: 3.1.0
info:
  title: Opus Task Management API
  description: A comprehensive task management REST API built with Spring Boot that provides user authentication, task management, email notifications, and reminder scheduling.
  version: 0.0.1-SNAPSHOT
  contact:
    name: Arkadipta Kundu
    email: arkadipta@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server

tags:
  - name: auth-controller
    description: Authentication and user verification operations
  - name: task-controller
    description: Task management operations
  - name: user-controller
    description: User management operations
  - name: admin-controller
    description: Administrative operations
  - name: public-controller
    description: Public endpoints that don't require authentication

paths:
  /auth/create-user:
    post:
      tags:
        - auth-controller
      summary: Register a new user
      description: Create a new user account in the system
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            example:
              name: "John Doe"
              userName: "johndoe"
              email: "john@example.com"
              password: "securePassword123"
              roles: ["USER"]
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /auth/user-varification/login:
    post:
      tags:
        - auth-controller
      summary: User login
      description: Authenticate user and receive JWT tokens
      operationId: authenticateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            example:
              username: "johndoe"
              password: "securePassword123"
              rememberMe: false
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT access token
                  refreshToken:
                    type: string
                    description: JWT refresh token
                  tokenType:
                    type: string
                    example: "Bearer"
                  expiresIn:
                    type: integer
                    description: Token expiration time in seconds

  /auth/user-varification/send:
    post:
      tags:
        - auth-controller
      summary: Send email verification OTP
      description: Send OTP to user's email for verification
      operationId: sendOtp
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OTP sent successfully
          content:
            text/plain:
              schema:
                type: string
                example: "OTP sent to your email address"

  /auth/user-varification/verify:
    post:
      tags:
        - auth-controller
      summary: Verify email OTP
      description: Verify the OTP sent to user's email
      operationId: verifyOtp
      security:
        - bearerAuth: []
      parameters:
        - name: otp
          in: query
          required: true
          schema:
            type: string
          description: The OTP code received via email
          example: "123456"
      responses:
        "200":
          description: Email verified successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Email verified successfully"

  /auth/user-varification/is-verified:
    get:
      tags:
        - auth-controller
      summary: Check email verification status
      description: Check if the user's email is verified
      operationId: isEmailVerified
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Email verification status
          content:
            application/json:
              schema:
                type: boolean

  /auth/user-varification/forget-password:
    post:
      tags:
        - auth-controller
      summary: Request password reset
      description: Request password reset token
      operationId: forgetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
            example:
              email: "user@example.com"
      responses:
        "200":
          description: Password reset token sent
          content:
            text/plain:
              schema:
                type: string
                example: "Password reset token sent to your email"

  /auth/user-varification/reset-password:
    post:
      tags:
        - auth-controller
      summary: Reset password
      description: Reset password using the token received via email
      operationId: resetPassword
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Password reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
            example:
              newPassword: "newSecurePassword123"
      responses:
        "200":
          description: Password reset successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Password reset successfully"

  /auth/user-varification/refresh:
    post:
      tags:
        - auth-controller
      summary: Refresh JWT token
      description: Get new access token using refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  tokenType:
                    type: string
                  expiresIn:
                    type: integer

  /tasks:
    get:
      tags:
        - task-controller
      summary: Get all tasks for logged-in user
      description: Retrieve all tasks belonging to the authenticated user
      operationId: getTasksForLoggedInUser
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"

    post:
      tags:
        - task-controller
      summary: Create new task
      description: Create a new task for the authenticated user
      operationId: createTask
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
            example:
              taskTitle: "Complete API Documentation"
              taskDesc: "Write comprehensive API documentation for the project"
              date: "2025-08-15T14:00:00"
              taskStatus: "TODO"
      responses:
        "200":
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  taskId:
                    type: integer

  /tasks/{id}:
    get:
      tags:
        - task-controller
      summary: Get task by ID
      description: Retrieve a specific task by its ID
      operationId: getTaskById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Task ID
      responses:
        "200":
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

    put:
      tags:
        - task-controller
      summary: Update task
      description: Update an existing task
      operationId: updateTask
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "200":
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

    delete:
      tags:
        - task-controller
      summary: Delete task
      description: Delete a specific task
      operationId: deleteTask
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Task ID
      responses:
        "200":
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /tasks/set-reminder:
    post:
      tags:
        - task-controller
      summary: Set task reminder
      description: Set a reminder for a specific task
      operationId: setTaskReminder
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: query
          required: true
          schema:
            type: integer
            format: int64
          description: Task ID
        - name: reminderDateTime
          in: query
          required: true
          schema:
            type: string
            format: date-time
          description: Reminder date and time (ISO format)
        - name: customEmail
          in: query
          required: false
          schema:
            type: string
            format: email
          description: Custom email for reminder (defaults to user's email)
      responses:
        "200":
          description: Reminder set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /tasks/reminder/{taskId}:
    delete:
      tags:
        - task-controller
      summary: Remove task reminder
      description: Remove reminder from a specific task
      operationId: removeTaskReminder
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Task ID
      responses:
        "200":
          description: Reminder removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /tasks/with-reminders:
    get:
      tags:
        - task-controller
      summary: Get tasks with reminders
      description: Retrieve all tasks that have reminders set
      operationId: getTasksWithReminders
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Tasks with reminders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"

  /user/{id}:
    get:
      tags:
        - user-controller
      summary: Get user by ID
      description: Get user details by ID
      operationId: getById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: User ID
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    put:
      tags:
        - user-controller
      summary: Update user
      description: Update user information
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

    delete:
      tags:
        - user-controller
      summary: Delete user
      description: Delete user account
      operationId: delteUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: User ID
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /admin/create-admin:
    post:
      tags:
        - admin-controller
      summary: Create admin user
      description: Create a new admin user (Admin access required)
      operationId: createAdmin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            example:
              name: "Admin User"
              userName: "adminuser"
              email: "admin@example.com"
              password: "securePassword123"
              roles: ["ADMIN"]
      responses:
        "200":
          description: Admin created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /admin/users:
    get:
      tags:
        - admin-controller
      summary: Get all users
      description: Retrieve all users in the system (Admin access required)
      operationId: getAllUsers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /admin/users/{id}:
    get:
      tags:
        - admin-controller
      summary: Get user by ID (Admin)
      description: Get specific user details (Admin access required)
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: User ID
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    delete:
      tags:
        - admin-controller
      summary: Delete user (Admin)
      description: Delete any user account (Admin access required)
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: User ID
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /admin/tasks:
    get:
      tags:
        - admin-controller
      summary: Get all tasks (Admin)
      description: Retrieve all tasks in the system (Admin access required)
      operationId: getAllTasks
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"

  /public/health:
    get:
      tags:
        - public-controller
      summary: Health check
      description: Check the health status of the API
      operationId: healthCheck
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "UP"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "0.0.1-SNAPSHOT"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Authorization header using the Bearer scheme

  schemas:
    User:
      type: object
      required:
        - userName
        - email
        - password
      properties:
        id:
          type: integer
          format: int64
          description: Unique user identifier
          readOnly: true
        name:
          type: string
          description: User's full name
          example: "John Doe"
        userName:
          type: string
          description: Unique username
          example: "johndoe"
        roles:
          type: array
          items:
            type: string
          description: User roles
          example: ["USER"]
        email:
          type: string
          format: email
          description: User's email address
          example: "john@example.com"
        password:
          type: string
          format: password
          description: User's password
          writeOnly: true
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/Task"
          description: Tasks associated with the user
          readOnly: true
        emailVerified:
          type: boolean
          description: Whether the user's email is verified
          default: false
          readOnly: true

    Task:
      type: object
      required:
        - taskTitle
      properties:
        taskId:
          type: integer
          format: int64
          description: Unique task identifier
          readOnly: true
        taskTitle:
          type: string
          description: Task title
          example: "Complete API Documentation"
        taskDesc:
          type: string
          description: Task description
          example: "Write comprehensive API documentation for the project"
        date:
          type: string
          format: date-time
          description: Task creation/due date
          example: "2025-08-10T10:30:00"
        taskStatus:
          type: string
          enum:
            - TODO
            - IN_PROGRESS
            - DONE
          description: Current status of the task
          default: TODO
        user:
          $ref: "#/components/schemas/User"
          description: User who owns the task
          readOnly: true
        reminderDateTime:
          type: string
          format: date-time
          description: When to send the reminder
          example: "2025-08-11T09:00:00"
        reminderEnabled:
          type: boolean
          description: Whether a reminder is set
          default: false
        reminderSent:
          type: boolean
          description: Whether a reminder email was already sent
          default: false
          readOnly: true
        reminderEmail:
          type: string
          format: email
          description: Email to send reminder to (optional, defaults to user's email)

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 1
          description: Username or email
          example: "johndoe"
        password:
          type: string
          minLength: 1
          format: password
          description: User password
        rememberMe:
          type: boolean
          description: Whether to remember the user session
          default: false

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: JWT refresh token
          example: "eyJhbGciOiJIUzI1NiIs..."

    ApiError:
      type: object
      properties:
        error:
          type: string
          description: Error type
        message:
          type: string
          description: Error message
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
        path:
          type: string
          description: API endpoint where the error occurred

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          example:
            error: "Bad Request"
            message: "Invalid input data"
            timestamp: "2025-08-10T12:00:00Z"
            path: "/api/tasks"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          example:
            error: "Unauthorized"
            message: "Invalid or expired token"
            timestamp: "2025-08-10T12:00:00Z"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          example:
            error: "Forbidden"
            message: "Access denied"
            timestamp: "2025-08-10T12:00:00Z"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          example:
            error: "Not Found"
            message: "Resource not found"
            timestamp: "2025-08-10T12:00:00Z"

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          example:
            error: "Internal Server Error"
            message: "An unexpected error occurred"
            timestamp: "2025-08-10T12:00:00Z"
